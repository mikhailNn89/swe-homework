***********Приложение автоматической проверки домашних заданий по программированию***********
*********************************************************************************************
1. Назначение
Приложение предназначено для преподавателя группы студентов и устанавливается на машине преподавателя.
Студенты должны выполнить задания на некотором языке программирования (C, Python и т.д.).
В ходе работы приложение автоматически проверяет задания и накапливает статистику по студентам.
Задания заключаются в реализации тела заранее определенной функции, для которой преподаватель готовит шаблон с описанием и одним или несколькими тестами.
Оценка успешности происходит при сравнении ожидаемого результата каждой функции с фактическим.

2. Особенности (ограничения) приложения версии 1.0
- Задания на языке C
- Задания поддерживаются в виде C-функции с заранее определенными именем и типом возвращаемого значения (т.е. невозможно задать функцию вида void fun())
- Ожидаемые и фактические значения функции записываются в текстовые файлы
- Описание и текстовые данные записываются на английском (без проблемы различных кодировок)
- Статистика группы сохраняется в текстовом файле в отдельности для каждого студента

3. Обновления до версии 2.0
- Поддержка заданий на других языках (Python)
- Сохранение статистики группы в SQL БД

4. Требования к рабочей среде
- *nix ОС с поддержкой коммандной оболочки bash
- Текстовый редактор (nano, vim и т.п.)
- C-компилятор (gcc и т.п.)
- Утилита git и репозиторий на GitHub
- Доступ в Интернет

5. Архитектура приложения
5.1 Репозиторий преподавателя
Преподаватель создает репозиторий на GitHub, в котором находятся:
- Папка studentsHW (с основным скриптом checker.sh)
- Файл passHW.txt (успешные результаты, дата теста)
- Файл fail.txt (неуспешные результаты, дата теста)
- Файл Links.txt (ссылки на GitHub-репозитории студентов)
- Файл Tasks.txt (описание заданий, структуры репозитория, входные/выходные данные)
- Файл Readme (документация приложения)
Также в репозитории преподавателя находятся папки Task1, Task2, ... TaskN.
Номер в названии каждой папки соответствует номеру задания.
5.2 Репозиторий студента
Название GitHub-репозитория студента совпадает с его фамилией (для сбора персональной статистики). 
В каждой папке Task1, ... TaskN из репозитория преподавателя студент размещает выполненное задание.
Например, для задания с переворотом слова в папке Task1 создается исходный файл Main1.c.

6. Алгоритм работы приложения
Когда задания выполнены, студент должен отправить преподавателю ссылку на свой GitHub-репозиторий.
Преподаватель добавляет ссылки всех студентов в файл Links.txt и запускает основной скрипт.
Скрипт преподавателя выполняет команду git clone для каждой ссылки.
Далее сохраняет в переменной StudentName название папки студента с его фамилией.
Затем скрипт переходит в папку студента и сверяет количество папок с количеством заданий. 
Если количество не совпадает, скрипт завершает работу с ошибкой.
Если количество папок соответствует, скрипт продолжает работу.
Скрипт последовательно переходит во вложенные папки каждого задания.
Далее запускает исходные файлы студента на компиляцию и исполнение с заранее подготовленными параметрами (файлы студента и классы/функции называются по заранее определенному шаблону), ожидая конкретного результата.
На примере задания с переворотом слова (Main1.c):
	1. Проверка наличия Main1.c
	2. Компиляция Main1.c
	3. Проверка наличия исполняемого файла Main1.elf
	4. Запуск Main1.elf и подача ему на вход ранее созданного скриптом input_word.txt
	5. Проверка наличия выходного файла output_word.txt
	6. Сравнение содержимого output_word.txt с ожидаемым значением
Если хотя бы 1 результат не соответствует ожиданию, задание не выполнено и скрипт записывает в файл fail.txt фамилию студента и номера непринятых заданий.
Если все тесты завершены успешно, скрипт заносит фамилию студента в файл passHW.txt.
Независимо от результата работы, перед завершением скрипт удаляет репозиторий студента с локальной машины преподавателя.
По завершению всех проверок, скрипт отправляет обновленные файлы fail.txt и passHW.txt в репозиторий преподавателя, чтобы студенты могли увидеть результаты.

7. Требования к заданию
Проверяемая программа должна поставлятся в виде исходного кода, в одном исходном файле. 
На примере задания Main1.c, которое должно переворачивать слово (строку) записанную во входном файле input_word.txt 
(ограничение на размер в 32 символа), и записывать её в выходной файл output_word.txt.
